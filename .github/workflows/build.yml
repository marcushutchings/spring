name: Build Engine
on:
  workflow_dispatch:
    inputs:
      strip-symbols:
        description: Strip Debug Symbols
        required: true
        default: "true"
      skip-cache:
        description: Skip Cache
        required: true
        default: "false"
      archtune-flags:
        description: Arch/Tune Flags
        required: false
        default: ""
      relwithdeb-flags:
        description: RELWITHDEBINFO Compilation flags
        required: true
        default: "-O3 -g -DNDEBUG"
      compilation-flags:
        description: Extra Compilation Flags
        required: false
        default: ""
jobs:
  build:
    name: ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.runs-on }}
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            os: 'windows-64',
            runs-on: 'ubuntu-20.04'
          }
#        - {
#            os: 'windows-32',
#            runs-on: 'ubuntu-20.04'
#          }
        - {
            os: 'linux-64',
            runs-on: 'ubuntu-18.04'
          }
    steps:
      - name: Debug Action
        uses: hmarr/debug-action@v1.0.0

      - name: Extract Branch Name
        #https://stackoverflow.com/questions/58033366/how-to-get-current-branch-within-github-actions/58034787
        id: extract-branch
#        if: github.event_name != 'pull_request'
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
        shell: bash

      - name: Install Build Dependencies (Common)
        run: |
          sudo apt-get update -y
          #sudo apt-get upgrade -y

          sudo apt-get install --fix-missing -y \
          coreutils \
          p7zip-full \
          clang-format \
          ninja-build \
          git \
          software-properties-common \
          pigz

      - name: Install Build Dependencies (windows-64)
        if: matrix.config.os == 'windows-64'
        run: >
          sudo apt-get install --fix-missing -y
          binutils-mingw-w64-x86-64 g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64

      - name: Install Build Dependencies (windows-32)
        if: matrix.config.os == 'windows-32'
        run: >
          sudo apt-get install --fix-missing -y
          binutils-mingw-w64-i686 g++-mingw-w64-i686 gcc-mingw-w64-i686

      - name: Install GCC-10 PPA (linux-64)
        if: matrix.config.runs-on == 'linux-64'
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt update -y
          sudo apt install -y gcc-10 g++-10

      - name: Install Build Dependencies (linux-64)
        if: matrix.config.os == 'linux-64'
        run: >
          sudo apt-get install --fix-missing -y
          libsdl2-dev
          libopenal-dev
          libfreetype6-dev
          libfontconfig1-dev

      - name: Replace CMake version
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: '3.16.x'

      - name: Show CMake Version
        run: cmake --version

      - name: Get Workflow Cache Data
        id: get-cache-id
        run: |
          version=v6
          echo "::set-output name=version::$version"
          session=$(head /dev/random -c 32 | sha1sum | awk '{ print $1 }')
          echo "::set-output name=session::$session"
        shell: bash

      - name: Download Cache Data
        if: github.event.inputs.skip-cache != 'true'
        id: cache-dl
        uses: actions/cache@v2
        with:
          path: /tmp/cache/${{ matrix.config.os }}/
          key: ${{ matrix.config.os }}-${{ steps.get-cache-id.outputs.version }}-${{ env.BRANCH_NAME }}-${{ steps.get-cache-id.outputs.session }} #will never match, but will always update
          restore-keys: |
            ${{ matrix.config.os }}-${{ steps.get-cache-id.outputs.version }}-${{ env.BRANCH_NAME }}-
            ${{ matrix.config.os }}-${{ steps.get-cache-id.outputs.version }}-

      - name: Check and Unpack Cache Data
        id: cache
        #steps.cache-dl.outputs.cache-hit is not good because it reports false for partial cache key hit
        run: |
          if [ -f /tmp/cache/${{ matrix.config.os }}/cache.tgz ]; then
            echo "Found build cache"
            echo "::set-output name=cache-hit::true"
            pigz -dc /tmp/cache/${{ matrix.config.os }}/cache.tgz | tar xvf -
          else
            echo "Not found build cache"
            echo "::set-output name=cache-hit::false"
          fi
        shell: bash

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3

      - name: Update Cached sources
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          THIS_BRANCH=$(git branch --show-current)
          if [[ $THIS_BRANCH != ${{ env.BRANCH_NAME }} ]]; then
            git reset --hard HEAD
            git checkout -b ${{ env.BRANCH_NAME }} || git checkout ${{ env.BRANCH_NAME }} || true
          fi
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@github.com"
          git pull --rebase --recurse-submodules origin ${{ env.BRANCH_NAME }} || true #it may fail first time if a submodule URL was replaced
          git pull --rebase --recurse-submodules origin ${{ env.BRANCH_NAME }}
          git submodule sync
          git submodule update --init --recursive --remote
          MYPWD=$(pwd)
          if [ -d ./mingwlibs64 ]; then
            cd ./mingwlibs64
            git pull --rebase
            cd $MYPWD
          fi
          if [ -d ./spring-static-libs ]; then
            cd ./spring-static-libs
            UBUNTU_VER=$(echo ${{ matrix.config.runs-on }} | cut -d'-' -f2)
            THIS_BRANCH=$(git branch --show-current)
            if [[ $THIS_BRANCH != $UBUNTU_VER ]]; then
              git reset --hard HEAD
              git checkout -b $UBUNTU_VER || git checkout $UBUNTU_VER || true
            fi
            git pull --rebase origin $UBUNTU_VER
            cd $MYPWD
          fi
          git fetch --tags --all
        working-directory: ${{ github.workspace }}/spring
        shell: bash

      - name: Clone Repository and Dependencies (windows-64)
        if: steps.cache.outputs.cache-hit != 'true' && matrix.config.os == 'windows-64'
        run: |
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@github.com"
          git clone --recursive https://github.com/${GITHUB_REPOSITORY}.git -b ${{ env.BRANCH_NAME }}
          cd spring
          git fetch --tags --all
          git clone https://github.com/${GITHUB_REPOSITORY_OWNER}/mingwlibs64.git mingwlibs64

      - name: Clone Repository and Dependencies (windows-32)
        if: steps.cache.outputs.cache-hit != 'true' && matrix.config.os == 'windows-32'
        run: |
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@github.com"
          git clone --recursive https://github.com/${GITHUB_REPOSITORY}.git -b ${{ env.BRANCH_NAME }}
          cd spring
          git fetch --tags --all
          git clone https://github.com/spring/mingwlibs.git mingwlibs

      - name: Clone Repository and Dependencies (linux-64)
        if: steps.cache.outputs.cache-hit != 'true' && matrix.config.os == 'linux-64'
        run: |
          git config --global user.name  "GitHub Action"
          git config --global user.email "action@github.com"
          git clone --recursive https://github.com/${GITHUB_REPOSITORY}.git -b ${{ env.BRANCH_NAME }}
          cd spring
          git fetch --tags --all
          UBUNTU_VER=$(echo ${{ matrix.config.runs-on }} | cut -d'-' -f2)
          git clone https://github.com/${GITHUB_REPOSITORY_OWNER}/spring-static-libs.git -b $UBUNTU_VER spring-static-libs

      - name: Create Build Folders
        run: |
          mkdir -p ./build-${{ matrix.config.os }}/
          mkdir -p ./build-${{ matrix.config.os }}/bin-dir
        working-directory: ${{ github.workspace }}/spring

      - name: Prepare Toolchain file (windows-64)
        if: matrix.config.os == 'windows-64'
        run: |
          rm ./my.cmake || true
          touch ./my.cmake
          echo "SET(CMAKE_SYSTEM_NAME Windows)" >> ./my.cmake
          echo "SET(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc-posix)" >> ./my.cmake
          echo "SET(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++-posix)" >> ./my.cmake
          echo "SET(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)" >> ./my.cmake
          echo "SET(CMAKE_DLLTOOL /usr/bin/x86_64-w64-mingw32-dlltool)" >> ./my.cmake
          echo "SET(DLLTOOL /usr/bin/x86_64-w64-mingw32-dlltool)" >> ./my.cmake
        shell: bash
        working-directory: ${{ github.workspace }}/spring

      - name: Prepare Toolchain file (windows-32)
        if: matrix.config.os == 'windows-32'
        run: |
          rm ./my.cmake || true
          touch ./my.cmake
          echo "SET(CMAKE_SYSTEM_NAME Windows)" >> ./my.cmake
          echo "SET(CMAKE_C_COMPILER i686-w64-mingw32-gcc-posix)" >> ./my.cmake
          echo "SET(CMAKE_CXX_COMPILER i686-w64-mingw32-g++-posix)" >> ./my.cmake
          echo "SET(CMAKE_RC_COMPILER /usr/bin/i686-w64-mingw32-windres)" >> ./my.cmake
          echo "SET(CMAKE_DLLTOOL /usr/bin/i686-w64-mingw32-dlltool)" >> ./my.cmake
          echo "SET(DLLTOOL /usr/bin/i686-w64-mingw32-dlltool)" >> ./my.cmake
        shell: bash
        working-directory: ${{ github.workspace }}/spring

      - name: Prepare Toolchain file (linux-64)
        if: matrix.config.os == 'linux-64'
        run: |
          rm ./my.cmake || true
          touch ./my.cmake
          echo "SET(CMAKE_SYSTEM_NAME Linux)" >> ./my.cmake
          echo "SET(CMAKE_C_COMPILER gcc-10)" >> ./my.cmake
          echo "SET(CMAKE_CXX_COMPILER g++-10)" >> ./my.cmake
        shell: bash
        working-directory: ${{ github.workspace }}/spring

#      - name: Remove BAR-specific release tags
#        run: |
#          git fetch --tags origin || true
#          git tag -d $(git tag | grep '{.*}') || true
#        shell: bash
#        working-directory: ${{ github.workspace }}/spring

#      - name: Setup tmate session
#        if: matrix.config.os == 'linux-64'
#        uses: mxschmitt/action-tmate@v3

      - name: Run CMake (windows)
        if: matrix.config.os == 'windows-64' || matrix.config.os == 'windows-32'
        run: |
          if [ -d ./mingwlibs ]; then
            WORKDIR=$(pwd)/mingwlibs
          fi
          if [ -d ./mingwlibs64 ]; then
            WORKDIR=$(pwd)/mingwlibs64
          fi
          LIBDIR=$WORKDIR/dll
          INCLUDEDIR=$WORKDIR/include

          MYARCHTUNE="${{ github.event.inputs.archtune-flags }}"
          MYCFLAGS="${{ github.event.inputs.compilation-flags }}"
          MYRWDIFLAGS="${{ github.event.inputs.relwithdeb-flags }}"

          cmake \
          -DCMAKE_TOOLCHAIN_FILE=./my.cmake \
          -DMARCH_FLAG="${MYARCHTUNE}" \
          -DCMAKE_CXX_FLAGS="${MYCFLAGS}" \
          -DCMAKE_C_FLAGS="${MYCFLAGS}" \
          -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="${MYRWDIFLAGS}" \
          -DCMAKE_C_FLAGS_RELWITHDEBINFO="${MYRWDIFLAGS}" \
          -DCMAKE_BUILD_TYPE=RELWITHDEBINFO \
          -DAI_TYPES=NATIVE \
          -B ./build-${{ matrix.config.os }}/ \
          .
        working-directory: ${{ github.workspace }}/spring
        shell: bash

      - name: Run CMake (linux-64)
        if: matrix.config.os == 'linux-64'
        run: |
          WORKDIR=$(pwd)/spring-static-libs
          LIBDIR=$WORKDIR/lib
          INCLUDEDIR=$WORKDIR/include

          MYARCHTUNE="${{ github.event.inputs.archtune-flags }}"
          MYCFLAGS="${{ github.event.inputs.compilation-flags }}"
          MYRWDIFLAGS="${{ github.event.inputs.relwithdeb-flags }}"

          cmake \
          -DCMAKE_TOOLCHAIN_FILE=./my.cmake \
          -DMARCH_FLAG="${MYARCHTUNE}" \
          -DCMAKE_CXX_FLAGS="${MYCFLAGS}" \
          -DCMAKE_C_FLAGS="${MYCFLAGS}" \
          -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="${MYRWDIFLAGS}" \
          -DCMAKE_C_FLAGS_RELWITHDEBINFO="${MYRWDIFLAGS}" \
          -DPREFER_STATIC_LIBS:BOOL=1 \
          -DCMAKE_USE_RELATIVE_PATHS:BOOL=1 \
          -DCMAKE_INSTALL_PREFIX:PATH= -DBINDIR:PATH=./ -DLIBDIR:PATH=./ -DDATADIR:PATH=./ -DMANDIR:PATH=share/man -DDOCDIR:PATH=share/doc/spring \
          -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DAI_TYPES=NATIVE \
          -DOGG_INCLUDE_DIR:PATH=${INCLUDEDIR} -DOGG_LIBRARY=${LIBDIR}/libogg.a \
          -DMINIZIP_INCLUDE_DIR:PATH=${INCLUDEDIR} -DMINIZIP_LIBRARY=${LIBDIR}/libminizip.a \
          -DLZMA_LIBRARY=${LIBDIR}/liblzma.a \
          -DLIBUUID_LIBRARY=${LIBDIR}/libuuid.a \
          -DVORBIS_INCLUDE_DIR:PATH=${INCLUDEDIR} -DVORBISENC_LIBRARY=${LIBDIR}/libvorbisenc.a -DVORBISFILE_LIBRARY=${LIBDIR}/libvorbisfile.a -DVORBIS_LIBRARY=${LIBDIR}/libvorbis.a \
          -DIL_IL_HEADER:PATH=${INCLUDEDIR}/IL/il.h -DIL_INCLUDE_DIR:PATH=${INCLUDEDIR} \
          -DIL_IL_LIBRARY:PATH=${LIBDIR}/libIL.a -DIL_LIBRARIES:PATH=${LIBDIR}/libIL.a \
          -DILU_LIBRARIES:PATH=${LIBDIR}/libILU.a \
          -DGIF_LIBRARY:PATH=${LIBDIR}/libgif.a -DGIF_INCLUDE_DIR:PATH=${INCLUDEDIR} \
          -DPNG_PNG_INCLUDE_DIR:PATH=${INCLUDEDIR} -DPNG_LIBRARY_RELEASE:PATH=${LIBDIR}/libpng.a \
          -DJPEG_INCLUDE_DIR:PATH=${INCLUDEDIR} -DJPEG_LIBRARY:PATH=${LIBDIR}/libjpeg.a \
          -DTIFF_INCLUDE_DIR:PATH=${INCLUDEDIR} -DTIFF_LIBRARY_RELEASE:PATH=${LIBDIR}/libtiff.a \
          -DZLIB_INCLUDE_DIR:PATH=${INCLUDEDIR} -DZLIB_LIBRARY_RELEASE:PATH=${LIBDIR}/libz.a \
          -DBZIP2_INCLUDE_DIR:PATH=${INCLUDEDIR} -DBZIP2_LIBRARIES:PATH=${LIBDIR}/libz.a \
          -DGLEW_INCLUDE_DIR:PATH=${INCLUDEDIR} -DGLEW_LIBRARIES:PATH=${LIBDIR}/libGLEW.a \
          -DLIBUNWIND_INCLUDE_DIRS:PATH=${INCLUDEDIR} -DLIBUNWIND_LIBRARY:PATH=${LIBDIR}/libunwind.a \
          -DCURL_INCLUDE_DIR:PATH=${INCLUDEDIR} -DCURL_LIBRARY:PATH=${LIBDIR}/libcurl.a \
          -DOPENSSL_INCLUDE_DIR:PATH=${INCLUDEDIR} -DOPENSSL_SSL_LIBRARY:PATH=${LIBDIR}/libssl.a -DOPENSSL_CRYPTO_LIBRARY:PATH=${LIBDIR}/libcrypto.a \
          -DVORBIS_INCLUDE_DIR:PATH=${INCLUDEDIR} \
          -DVORBISENC_LIBRARY:PATH=${LIBDIR}/libvorbisenc.a -DVORBISFILE_LIBRARY:PATH=${LIBDIR}/libvorbisfile.a -DVORBIS_LIBRARY:PATH=${LIBDIR}/libvorbis.a \
          -B ./build-${{ matrix.config.os }}/ \
          .
        working-directory: ${{ github.workspace }}/spring
        shell: bash

      - name: Run Make All
        run: |
          CLEANLIST_LIN=$(find -maxdepth 1 -name '*.so')" "$(find -maxdepth 1 -name 'spring*' -executable)" "$(find -maxdepth 1 -name 'pr-downloader')" "$(find AI/Skirmish -name libSkirmishAI.so)" "$(find AI/Interfaces -name libAIInterface.so)
          CLEANLIST_WIN=$(find -maxdepth 1 -name '*.dll')" "$(find -maxdepth 1 -name '*.exe')" "$(find AI/Skirmish -name SkirmishAI.dll)" "$(find AI/Interfaces -name AIInterface.dll)" "$(find -name pr-downloader_shared.dll)
          CLEANLIST_VAR=$(find -name 'GameVersion.cpp.o')
          CLEANLIST=$CLEANLIST_LIN" "$CLEANLIST_WIN" "$CLEANLIST_VAR
          rm -f $CLEANLIST VERSION
          make -j$(nproc) all
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}

      - name: Fill Portable Directory (windows)
        if: matrix.config.os == 'windows-64' || matrix.config.os == 'windows-32'
        run: |
          rm -rf ./bin-dir/*
          if [ -d ../mingwlibs64 ]; then
            cp ../mingwlibs64/dll/* ./bin-dir/
          fi
          if [ -d ../mingwlibs ]; then
            cp ../mingwlibs/dll/* ./bin-dir/
          fi
          cp ./*.exe ./bin-dir/
          cp ../rts/lib/luasocket/src/socket.lua ./bin-dir/
          cp ./tools/pr-downloader/src/pr-downloader.exe ./bin-dir/
          touch ./bin-dir/springsettings.cfg
          truncate -s 0 ./bin-dir/springsettings.cfg
          cp ./unitsync.dll ./bin-dir/
          cp ../cont/luaui.lua ./bin-dir/luaui.lua
          cp -R ../cont/LuaUI ./bin-dir/LuaUI
          mkdir ./bin-dir/games
          mkdir ./bin-dir/maps
          cp -R ../cont/fonts ./bin-dir/fonts
          cp -R ../cont/examples ./bin-dir/examples
          mkdir ./bin-dir/doc
          cp ../AUTHORS ./bin-dir/doc/AUTHORS
          cp ../COPYING ./bin-dir/doc/COPYING
          cp ../FAQ ./bin-dir/doc/FAQ
          cp ../gpl-2.0.txt ./bin-dir/doc/gpl-2.0.txt
          cp ../gpl-3.0.txt ./bin-dir/doc/gpl-3.0.txt
          cp ../LICENSE ./bin-dir/doc/LICENSE
          cp ../README.markdown ./bin-dir/doc/README.markdown
          cp ../THANKS ./bin-dir/doc/THANKS
          cp ../cont/ctrlpanel.txt ./bin-dir/ctrlpanel.txt
          cp ../cont/cmdcolors.txt ./bin-dir/cmdcolors.txt
          cp -R ./base ./bin-dir/base
          mkdir -p ./bin-dir/AI/Interfaces/C/0.1/
          cp -R ./AI/Interfaces/C/data/* ./bin-dir/AI/Interfaces/C/0.1/
          cp -R ../AI/Interfaces/C/data/* ./bin-dir/AI/Interfaces/C/0.1/
          mkdir -p ./bin-dir/AI/Skirmish/NullAI/0.1
          cp -R ./AI/Skirmish/NullAI/data/* ./bin-dir/AI/Skirmish/NullAI/0.1/
          cp -R ../AI/Skirmish/NullAI/data/* ./bin-dir/AI/Skirmish/NullAI/0.1/
          mkdir -p ./bin-dir/AI/Skirmish/CircuitAI/stable/
          cp -R ./AI/Skirmish/CircuitAI/data/* ./bin-dir/AI/Skirmish/CircuitAI/stable/
          cp -R ../AI/Skirmish/CircuitAI/data/* ./bin-dir/AI/Skirmish/CircuitAI/stable/
          mkdir -p ./bin-dir/AI/Skirmish/BARb/stable/
          cp -R ./AI/Skirmish/BARb/data/* ./bin-dir/AI/Skirmish/BARb/stable/
          cp -R ../AI/Skirmish/BARb/data/* ./bin-dir/AI/Skirmish/BARb/stable/
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}
        shell: bash

      - name: Fill Portable Directory (linux-64)
        if: matrix.config.os == 'linux-64'
        run: |
          rm -rf ./bin-dir/*
          cp ./spring* ./bin-dir/
          cp ../rts/lib/luasocket/src/socket.lua ./bin-dir/
          cp ./tools/pr-downloader/src/pr-downloader ./bin-dir/
          touch ./bin-dir/springsettings.cfg
          truncate -s 0 ./bin-dir/springsettings.cfg
          cp ./libunitsync.so ./bin-dir/
          mkdir -p ./bin-dir/bin/
          cp ./tools/mapcompile/mapcompile ./bin-dir/bin/
          cp ../cont/luaui.lua ./bin-dir/luaui.lua
          cp -R ../cont/LuaUI ./bin-dir/LuaUI
          cp -R ../cont/fonts ./bin-dir/fonts
          cp -R ../cont/examples ./bin-dir/examples
          mkdir -p ./bin-dir/share/applications
          cp -R ../cont/freedesktop/applications/* ./bin-dir/share/applications/
          mkdir -p ./bin-dir/share/mime/packages
          cp -R ../cont/freedesktop/mime/* ./bin-dir/share/mime/packages
          mkdir -p ./bin-dir/share/pixmaps
          cp -R ../cont/freedesktop/pixmaps/* ./bin-dir/share/pixmaps/
          cp ../cont/ctrlpanel.txt ./bin-dir/ctrlpanel.txt
          cp ../cont/cmdcolors.txt ./bin-dir/cmdcolors.txt
          cp -R ./base ./bin-dir/base
          mkdir -p ./bin-dir/AI/Interfaces/C/0.1/
          cp -R ./AI/Interfaces/C/data/* ./bin-dir/AI/Interfaces/C/0.1/
          cp -R ../AI/Interfaces/C/data/* ./bin-dir/AI/Interfaces/C/0.1/
          mkdir -p ./bin-dir/AI/Skirmish/NullAI/0.1
          cp -R ./AI/Skirmish/NullAI/data/* ./bin-dir/AI/Skirmish/NullAI/0.1/
          cp -R ../AI/Skirmish/NullAI/data/* ./bin-dir/AI/Skirmish/NullAI/0.1/
          mkdir -p ./bin-dir/AI/Skirmish/CircuitAI/stable/
          cp -R ./AI/Skirmish/CircuitAI/data/* ./bin-dir/AI/Skirmish/CircuitAI/stable/
          cp -R ../AI/Skirmish/CircuitAI/data/* ./bin-dir/AI/Skirmish/CircuitAI/stable/
          mkdir -p ./bin-dir/AI/Skirmish/BARb/stable/
          cp -R ./AI/Skirmish/BARb/data/* ./bin-dir/AI/Skirmish/BARb/stable/
          cp -R ../AI/Skirmish/BARb/data/* ./bin-dir/AI/Skirmish/BARb/stable/
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}
        shell: bash

      - name: Fill-in Debug Symbols Directory (windows)
        if: github.event.inputs.strip-symbols == 'true' && (matrix.config.os == 'windows-64' || matrix.config.os == 'windows-32')
        run: |
          EXECUTABLES=$(find -maxdepth 1 -name '*.dll')" "$(find -maxdepth 1 -name '*.exe')" "$(find AI/Skirmish -name SkirmishAI.dll)" "$(find AI/Interfaces -name AIInterface.dll)" "$(find -name pr-downloader_shared.dll)
          for tostripfile in ${EXECUTABLES}; do
            if [ -f ${tostripfile} ]; then
              if ! objdump -h ${tostripfile} | grep -q .gnu_debuglink; then
                      debugfile=$(dirname $tostripfile)/$(echo $(basename $tostripfile) | cut -f 1 -d '.').dbg
                      echo "stripping ${tostripfile}, producing ${debugfile}"
                      (objcopy --only-keep-debug ${tostripfile} ${debugfile} && \
                      strip --strip-debug --strip-unneeded ${tostripfile} && \
                      objcopy --add-gnu-debuglink=${debugfile} ${tostripfile})
                  else
                      echo "not stripping ${tostripfile}"
                  fi
              fi
          done
          wait
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}/bin-dir
        shell: bash

      - name: Fill-in Debug Symbols Directory (linux-64)
        if: github.event.inputs.strip-symbols == 'true' && matrix.config.os == 'linux-64'
        run: |
          EXECUTABLES=$(find -maxdepth 1 -name '*.so')" "$(find -maxdepth 1 -name 'spring*' -executable)" "$(find -maxdepth 1 -name 'pr-downloader')" "$(find AI/Skirmish -name libSkirmishAI.so)" "$(find AI/Interfaces -name libAIInterface.so)
          for tostripfile in ${EXECUTABLES}; do
            if [ -f ${tostripfile} ]; then
              if ! objdump -h ${tostripfile} | grep -q .gnu_debuglink; then
                      debugfile=$(dirname $tostripfile)/$(echo $(basename $tostripfile) | cut -f 1 -d '.').dbg
                      echo "stripping ${tostripfile}, producing ${debugfile}"
                      (objcopy --only-keep-debug ${tostripfile} ${debugfile} && \
                      strip --strip-debug --strip-unneeded ${tostripfile} && \
                      objcopy --add-gnu-debuglink=${debugfile} ${tostripfile})
                  else
                      echo "not stripping ${tostripfile}"
                  fi
              fi
          done
          wait
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}/bin-dir
        shell: bash

      - name: Fill-in Build Options File
        if: matrix.config.os == 'linux-64'
        run: |
          MYARCHTUNE="${{ github.event.inputs.archtune-flags }}"
          MYCFLAGS="${{ github.event.inputs.compilation-flags }}"
          MYRWDIFLAGS="${{ github.event.inputs.relwithdeb-flags }}"
          MYSKIPCACHE="${{ github.event.inputs.skip-cache }}"
          MYSTRIPSYMBOLS="${{ github.event.inputs.strip-symbols }}"
          MYCXX_FLAGS=$(cat ${{ github.workspace }}/spring/build-${{ matrix.config.os }}/rts/builds/legacy/CMakeFiles/engine-legacy.dir/flags.make | grep CXX_FLAGS)

          rm -rf buildoptions.txt || true
          touch ./buildoptions.txt
          echo "MYARCHTUNE=$MYARCHTUNE" >> ./buildoptions.txt
          echo "MYCFLAGS=$MYCFLAGS" >> ./buildoptions.txt
          echo "MYRWDIFLAGS=$MYRWDIFLAGS" >> ./buildoptions.txt
          echo "MYSKIPCACHE=$MYSKIPCACHE" >> ./buildoptions.txt
          echo "MYSTRIPSYMBOLS=$MYSTRIPSYMBOLS" >> ./buildoptions.txt
          echo "$MYCXX_FLAGS" >> ./buildoptions.txt

        working-directory: ${{ github.workspace }}/spring
        shell: bash

      - name: Pack Build Artifacts
        id: pack-artifacts
        run: |
          tag_name_short={${{ env.BRANCH_NAME }}}$(git describe --abbrev=7)
          tag_name={${{ env.BRANCH_NAME }}}$(git describe --abbrev=7)_${{ matrix.config.os }}
          bin_name=spring_bar_$tag_name-minimal-portable.7z
          dbg_name=spring_bar_$tag_name-minimal-symbols.tgz
          echo "::set-output name=tag_name_short::$tag_name_short"
          echo "::set-output name=tag_name::$tag_name"
          echo "::set-output name=bin_name::$bin_name"
          echo "::set-output name=dbg_name::$dbg_name"
          cd ./bin-dir
          7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on ../$bin_name ./* -xr\!*.dbg
          touch empty.dbg
          DEBUGFILES=$(find ./ -name '*.dbg')
          tar cvfz ../$dbg_name ${DEBUGFILES}
        working-directory: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}
        shell: bash

      - name: Upload Bin as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.pack-artifacts.outputs.bin_name }}
          path: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}/${{ steps.pack-artifacts.outputs.bin_name }}

      - name: Upload Dbg Artifacts
        if: github.event.inputs.strip-symbols == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.pack-artifacts.outputs.dbg_name }}
          path: ${{ github.workspace }}/spring/build-${{ matrix.config.os }}/${{ steps.pack-artifacts.outputs.dbg_name }}

      - name: Upload Build Options Artifact
        if: matrix.config.os == 'linux-64'
        uses: actions/upload-artifact@v2
        with:
          name: buildoptions.txt
          path: ${{ github.workspace }}/spring/buildoptions.txt

      - name: Clean up Build Dir and Artifacts
        run: |
          BUILDDIR="${{ github.workspace }}/spring/build-${{ matrix.config.os }}"
          rm $BUILDDIR/${{ steps.pack-artifacts.outputs.bin_name }}
          rm $BUILDDIR/${{ steps.pack-artifacts.outputs.dbg_name }}
          rm -rf $BUILDDIR/bin-dir
          find $BUILDDIR -type f -iname "*.a" -delete
          find $BUILDDIR -type f -iname "*.dbg" -delete
          CLEANLIST_LIN=$(find $BUILDDIR -maxdepth 1 -name '*.so')" "$(find $BUILDDIR -maxdepth 1 -name 'spring*' -executable)" "$(find $BUILDDIR -maxdepth 1 -name 'pr-downloader')" "$(find $BUILDDIR/AI/Skirmish -name libSkirmishAI.so)" "$(find $BUILDDIR/AI/Interfaces -name libAIInterface.so)
          CLEANLIST_WIN=$(find $BUILDDIR -maxdepth 1 -name '*.dll')" "$(find $BUILDDIR -maxdepth 1 -name '*.exe')" "$(find $BUILDDIR/AI/Skirmish -name SkirmishAI.dll)" "$(find $BUILDDIR/AI/Interfaces -name AIInterface.dll)" "$(find $BUILDDIR -name pr-downloader_shared.dll)
          CLEANLIST=$CLEANLIST_LIN" "$CLEANLIST_WIN
          rm -f $CLEANLIST || true

      - name: Pack Cache Data
        if: steps.cache-dl.outputs.cache-hit != 'true' #cause it won't be saved anyway due to cache hit
        run: |
          mkdir -p /tmp/cache/${{ matrix.config.os }}/
          rm /tmp/cache/${{ matrix.config.os }}/cache.tgz || true
          tar cvf - ./ | pigz -9 > /tmp/cache/${{ matrix.config.os }}/cache.tgz

